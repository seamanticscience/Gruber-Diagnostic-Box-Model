c =====================================================================
c
c     SUBROUTINE MATEAR_ENT
c 
c     PURPOSE: this routine calculates the contribution of entrainment
c                  on the mixed layer budget. This routine is the
c                  version where the same entrainment scheme of
c                  Matear (1995) is used 
c                  
c
c     VARIABLES:
c 
c     IN : k              : time loop counter
c          time           : actual time
c          ts             : time step
c          const_vertgrad : logical indicating use of constant vert grad
c          dCdz_const     : value of constant vertical C gradient
c          dCdz_var       : value of variable vertical C gradient
c          D_dCdz         : correction term for dC/dz
c          ddC13_dC_bml   : ratio of dd13C/dz to dC/dz below mixed layer
c          const_lent     : logical indicating use of const. or var. ent_length
c          lent_const     : constant entrainment length
c          dlent_dh       : ratio of lent to mixed layer depth []
c          ent_fact       : entrainment multiplication factor
c
c          h_new          : mixed layer depth at timestep t+ts
c          h_old          : mixed layer depth at tiemstep t
c
c          C              : obs C in the mixed layer
c          C13            : obs C13 in the mixed layer
c          h              : obs mixed layer depth
c
c     OUT: D_C            : modified array holding the rates of change for C
c          D_C13          : modified array holding the rates of change for C13
c          fluxes         : modified array holding the fluxes
c 
c     REVISION:
c
c     date     author  remarks
c   
c      8.08.96   ng    first implementation
c      9.09.96   ng    included const_lent,dlent_dh
c      9.09.96   ng    use accurate formula for dc13_dz
c     17.10.99   ng    adapted for interannual variability runs
c
c =====================================================================
c
      subroutine matear_ent(k,time,ts,
     $     const_vertgrad,dCdz_const,dCdz_var,D_dcdz,
     $     ddC13_dC_bml,const_lent,lent_const,dlent_dh,ent_fact,
     $     h_new,h_old,
     $     c,c13,h,
     $     D_C,D_c13,fluxes)
c
      implicit none
c
c ---------------------------------------------------------------------
c     global variables
c ---------------------------------------------------------------------
c
# include "simulation.h"
# include "processes.h"
# include "slabs.h"
# include "input.h"
# include "diffent_params.h"
# include "c13_params.h"
      integer k
c
c ---------------------------------------------------------------------
c     external functions
c ---------------------------------------------------------------------
c
      double precision rates_to_fluxes,c13_to_delta ! functions
c
c --------------------------------------------------------------------
c     local variables
c ---------------------------------------------------------------------
c
      double precision dc13_o,ddc13dz,dcdz,dc13dz
      double precision c_bml,c13_bml,ent_length
c
c =====================================================================
c     begin of executable code
c =====================================================================
c
c
c --------------------------------------------------------------------
c     determine vertical C gradient
c --------------------------------------------------------------------
c
      if (const_vertgrad) then
         dCdz = dCdz_const
      else
         dCdz = dCdz_var + D_dcdz
      endif
c
c --------------------------------------------------------------------
c     calulate the vertical C13 gradient from the vertical
c       dC13 gradient (approximate formula)
c       units [umol kg-1 m-1]
c     changed to accurate formula
c --------------------------------------------------------------------
c    
      dC13_o = c13_to_delta(c13,c)
      ddC13dz = dCdz * ddC13_dC_bml ! unit [per mil m-1]
c      dc13dz = r_std/(1+r_std) * 
c     $     (c * ddC13dz*1.d-3 + dcdz*(dc13_o*1.d-3 + 1.d0))
      dc13dz = r_std/(1+r_std*dc13_o*1.d-3+r_std) * 
     $     ((dc13_o*1.d-3 + 1.d0)*dcdz +
     $      c / (1+r_std*dc13_o*1.d-3+r_std) * ddc13dz * 1.d-3)
c
c --------------------------------------------------------------------
c     calculate contribution only during depeening of the 
c       mixed layer
c --------------------------------------------------------------------
c  
#ifndef backw_sim
      if (h_new .ge. h_old) then
#else
      if (h_new .le. h_old) then
#endif
c
c --------------------------------------------------------------------
c     determine the entrainment length
c --------------------------------------------------------------------
c
         if (const_lent) then
            ent_length = lent_const
         else
c            ent_length = 3.86d0 + 0.076d0 * h
c            ent_length = 0.39d0 + 0.153d0 * h
c
             ent_length = 2.00d0 + dlent_dh * h

            if (ent_length .lt. 10.d0) then
               ent_length = 10.d0
            endif
         endif
c
c --------------------------------------------------------------------
c     determine the different contributions to entrainment
c --------------------------------------------------------------------
c
         c_bml = c + ent_length * dcdz
         c13_bml = c13 + ent_length * dc13dz
c
#ifndef backw_sim
         D_c(3,k) = ent_fact * 1.d0/h * (h_new - h_old) * (c_bml - c)
         D_c13(3,k) = ent_fact * 1.d0/h * (h_new - h_old) * 
     $        (c13_bml - c13)
#else
         D_c(3,k) = ent_fact * 1.d0/h * (h_old - h_new) * (c_bml - c)
         D_c13(3,k) = ent_fact * 1.d0/h * (h_old - h_new) * 
     $        (c13_bml - c13)
#endif

         fluxes(3,k) = rates_to_fluxes(D_C(3,k),ts,h)
c
c --------------------------------------------------------------------
c     shoaling period
c --------------------------------------------------------------------
c
      else
         D_c(3,k) = 0.d0
         fluxes(3,k) = 0.d0
         D_c13(3,k) = 0.d0
      endif
c
c --------------------------------------------------------------------
c     for debugging purposes
c --------------------------------------------------------------------
c
c
#ifdef debugging
      if (mod(k,90) .eq. 0) then
         write(*,*)
         write(*,*) '--MATEAR_ENTRAINMENT: '
         write(*,*) 'k : ',k
         write(*,*) 'h_new, h_old : ',h_new, h_old
         write(*,*) 'dcdz         : ',dcdz
         write(*,*) 'dc13dz       : ',dc13dz
         write(*,*) 'c_bml        : ',c_bml
         write(*,*) 'c            : ',c
         write(*,*) 'c13_bml      : ',c13_bml
         write(*,*) 'c13          : ',c13
         write(*,*) 'rate         : ',D_C(3,k)
         write(*,*) 'rate (c13)   : ',D_C13(3,k)
         write(*,*) 'flux         : ',fluxes(3,k)
         write(*,*)
      endif
#endif
c
c --------------------------------------------------------------------
c     return to main program
c --------------------------------------------------------------------
c        
      return
      end

